@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl:    <http://www.w3.org/2002/07/owl#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .
@prefix dcterms:<http://purl.org/dc/terms/> .
@prefix vann:   <http://purl.org/vocab/vann/> .
@prefix voaf:   <http://purl.org/vocommons/voaf#> .
@prefix vs:     <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix foaf:   <http://xmlns.com/foaf/0.1/> .
@prefix dce:    <http://purl.org/dc/elements/1.1/> .
@prefix dbo:    <http://dbpedia.org/ontology/> .
@prefix schema: <http://schema.org/> .
@prefix seas:   <http://w3id.org/seas/> .

@prefix opm: <https://w3id.org/opm#> .
@base <https://w3id.org/product#> .

#################################
# CLASSES
#################################

opm:Property
        a owl:Class ;
        rdfs:label              "Property"@en ,
                                "Egenskab"@da ;
        owl:equivalentClass     seas:Property .

opm:PropertyState
        a owl:Class ;
        rdfs:label      "Property State"@en ;
        rdfs:comment    """A state is an evaluation holding the value + metadata about a property that was true for the given time.
Metadata must as a minimum be the time of generation stated by prov:generatedAtTime, but preferably also a prov:wasAttributedTo reference to the agent who created the state.
Calculated properties are also stored as states as these change when an expression argument changes. Calculations must have an opm:expression and a prov:wasDerivedFrom assigned to them. prov:wasDerivedFrom is stored as a rdf:Seq pointing to the property states that were used for the calculation."""@en ,
                        """Et stade er en evaluering, der indeholder værdien + metadata omkring en egenskab, som var gældende ved et givent tidspunkt.
Metadata skal som minimum bestå af oprettelsestidspunktet givet ved prov:generatedAtTime, men helst også af en prov:wasAttributedTo reference til den agent som oprettede tilstanden.
Beregnede egenskaber lagres også som tilstande da disse ændres når en beregningsparameter ændres. Beregninger skal have en opm:expression og en prov:wasDerivedFrom tilknyttet. prov:wasDerivedFrom lagres som en rdf:Seq, som peger på egenskabstilstandene som blev brugt til beregningen."""@da ; 
        rdfs:subClassOf seas:Evaluation .

opm:CurrentPropertyState
        a owl:Class ;
        rdfs:subClassOf opm:PropertyState ;
        rdfs:label      "Current Property State"@en ;
        rdfs:comment    "The property state that was most recently defined is an instance of opm:CurrentPropertyState." .

opm:OutdatedPropertyState
        a owl:Class ;
        rdfs:subClassOf opm:PropertyState ;
        rdfs:label      "Outdated Property State"@en ;
        rdfs:comment    "Any property state that has been substituted with a new one is an instance of opm:OutdatedState." .

opm:Deleted
        a owl:Class ;
        rdfs:label      "Deleted"@en ;
        rdfs:comment    "A deleted property is a property that is no longer part of the design. The class enables a user to delete a property without removing it from the dataset."@en .

# PROPERTY RELIABILITY

opm:Assumed
        a owl:Class ;
        rdfs:label      "Assumed"@en ;
        rdfs:comment    "An assumption is an unconfirmed property. Assumptions enable designers to move on with the design knowing that the assumed property might change as the project progresses."@en .

opm:Confirmed
        a owl:Class ;
        rdfs:label      "Confirmed"@en ;
        rdfs:comment    "A confirmed property is a property that has been validated by an agent who is authorized to do so. A confirmed property should not be changed."@en .

opm:Derived
        a owl:Class ;
        rdfs:label      "Derived"@en ;
        rdfs:comment    """A derived property is a property that has been deduced from one or more other properties. Specifying a relationship to these should be done using the prov:wasDerivedFrom predicate."""@en .

opm:Required
        a owl:Class ;
        rdfs:label      "Required"@en ;
        rdfs:comment    """A required property can be assigned to abstract models such as an abstract product model that holds the prerequisites for a future building. The requirements can be compared to properties of actual products available on the market."""@en .

# CALCULATIONS

opm:Calculation
        a owl:Class ;
        rdfs:label      "Calculation"@en ;
        rdfs:comment    """A calculation holds the necessary information to infer derived properties."""@en .

#################################
# OBJECT PROPERTIES
#################################

# Consider using seas:evaluation instead
opm:hasPropertyState
        a owl:ObjectProperty ;
        rdfs:subPropertyOf      seas:evaluation ;
        rdfs:label              "has property state"@en ,
                                "har egenskabstilstand"@da ;
        rdfs:comment            "Relationship between a property and one of its states."@en ;
        rdfs:domain             opm:Property ;
        rdfs:range              opm:PropertyState .

# To be considered
opm:documentation
        a owl:ObjectProperty ;
        rdfs:label      "documentation"@en ;
        rdfs:comment    "Relationship between a confirmed state and a file holding some documentation. This could be either a mail, a scanned document or a digital signature."@en ;
        rdfs:domain     opm:PropertyState .

opm:argumentPaths
        a owl:ObjectProperty ;
        rdfs:label      "arument paths"@en ;
        rdfs:comment    """Relationship between a calculation and a list (RDF collection) of argument paths. An argument path is given in triples and indicates the relationship between the Feature of Interest (FoI) to which the inferred property will be applied and a FoI on which the argument property exists. 
If the argument exists on the FoI itself it can be referred by ```?foi xx:argProperty ?arg1```. The path can be any length, and another example could be an argument existing on the super-system of a FoI: ```?foi xx:subSystemOf/xx:argProperty ?arg1```."""@en ;
        rdfs:domain     opm:Calculation .

opm:inferredProperty
        a owl:ObjectProperty ;
        rdfs:label      "inferred property"@en ;
        rdfs:comment    "Relationship between a calculation and the property kind it will infer."@en ;
        rdfs:domain     opm:Calculation ;
        rdfs:range      opm:Property .

opm:foiRestriction
        a owl:ObjectProperty ;
        rdfs:label      "feature of interest restriction"@en ;
        rdfs:comment    "If a calculation is only to be applied to one specific feature of interest (FoI), this restriction can be used."@en ;
        rdfs:domain     opm:Calculation ;
        rdfs:range      seas:FeatureOfInterest .

#################################
# DATATYPE PROPERTIES
#################################

opm:expression
        a owl:DatatypeProperty ;
        rdfs:label      "expression"@en ;
        rdfs:comment    "Points to a literal containing the expression to execute with a calculation. Arguments of the expression are defined with vaiables (ie. ?arg1) corresponding to ones used in the argument paths."@en ;
        rdfs:domain     opm:Calculation .

opm:pathRestriction
        a owl:DatatypeProperty ;
        rdfs:label      "path restriction"@en ;
        rdfs:comment    "If a calculation is only to be applied to features of interest (FoIs) that have a certain relationship applied, this restriction can be used."@en ;
        rdfs:domain     opm:Calculation ;
        rdfs:range      xsd:string .

#################################
# CONSTRAINTS
#################################
# Disjunctive classes
[] a owl:AllDisjointClasses ;
        owl:members
              ( opm:Property
                opm:PropertyState
                opm:Calculation ) .

# Disjunctive classes
[] a owl:AllDisjointClasses ;
        owl:members
              ( opm:Assumption
                opm:Confirmed ) .

# Disjunctive classes
[] a owl:AllDisjointClasses ;
        owl:members
              ( opm:CurrentPropertyState
                opm:OutdatedState ) .