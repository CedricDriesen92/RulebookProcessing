@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix fro: <https://ontology.firebim.be/ontology/fro#> .
@prefix fbo: <https://ontology.firebim.be/ontology/fbo#> .
@prefix bot: <https://w3id.org/bot#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix : <https://ontology.firebim.be/ontology/fro#> .

# Shape generated from Regulatory Text for Article 2.2.1.1
# Subject URI: <https://ontology.firebim.be/ontology/fro#Article_2_2_1_1>
# Text: "Elk compartiment heeft minimum: - één uitgang indien de maximale bezetting minder dan 100 personen bedraagt; - twee uitgangen indien de bezetting 100 of meer dan 100 en minder dan 500 personen bedraagt; - 2 + n uitgangen waarbij n het geheel getal is onmiddellijk groter dan het quotiënt van de deling door 1000 van de maximale bezetting van het compartiment, indien de bezetting 500 of meer dan 500 personen bedraagt. Het minimum aantal uitgangen kan door de brandweer verhoogd worden in functie van de bezetting en de configuratie van de lokalen. Het aantal uitgangen van bouwlagen en lokalen wordt bepaald zoals voor de compartimenten."

:Shape_Article_2_2_1_1 a sh:NodeShape ;
    sh:targetClass fro:Compartment, bot:Storey, bot:Space ; # Applies to compartments, storeys, and spaces (lokalen)
    sh:message "Validatie shape voor Artikel 2.2.1.1 betreffende minimum aantal uitgangen gebaseerd op bezetting."@nl ;
    sh:description """Checks if the minimum number of exits meets the requirements based on maximum occupancy:
- Occupancy < 100: min 1 exit
- 100 <= Occupancy < 500: min 2 exits
- Occupancy >= 500: min 2 + n exits, where n = floor(occupancy / 1000) + 1 (i.e., min 3 + floor(occupancy / 1000) exits)"""@en ;

    # Pre-condition: Ensure maximumOccupancy exists and is a valid integer for the calculation
    sh:property [
        sh:path fro:maximumOccupancy ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype xsd:integer ;
        sh:minInclusive 0 ; # Occupancy cannot be negative
        sh:message "Maximale bezetting moet opgegeven zijn als een enkel, niet-negatief geheel getal voor de berekening van het aantal uitgangen (Art. 2.2.1.1)."@nl ;
    ] ;
    # Pre-condition: Ensure numberOfExits exists and is a valid integer for comparison
    sh:property [
        sh:path fro:numberOfExits ;
        sh:minCount 1 ;
        # sh:maxCount 1 ; # A space/compartment usually has one value for numberOfExits, but let's assume it's the total count if multiple properties exist. Let's stick to minCount 1.
        sh:datatype xsd:integer ;
        sh:minInclusive 1 ; # Must have at least one exit according to the rule logic
        sh:message "Aantal uitgangen moet opgegeven zijn als een positief geheel getal voor validatie (Art. 2.2.1.1)."@nl ;
    ] ;

    # Core logic validation using SPARQL due to calculation requirement
    sh:sparql [
        sh:message "Het aantal uitgangen ({?numExits}) voldoet niet aan de minimumeis ({?requiredExits}) gebaseerd op de maximale bezetting ({?occupancy}) (Art. 2.2.1.1)."@nl ;
        sh:prefixes [
            sh:declare [
                sh:prefix "firebim" ;
                sh:namespace "https://ontology.firebim.be/ontology/fro#"^^xsd:anyURI ;
            ] ;
             sh:declare [
                sh:prefix "xsd" ;
                sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI ;
            ] ;
        ] ;
        # This query selects focus nodes ($this) that violate the minimum exit requirement.
        sh:select """
            SELECT $this ?occupancy ?numExits ?requiredExits
            WHERE {
                # Get the occupancy and number of exits for the target node ($this)
                $this fro:maximumOccupancy ?occupancy .
                $this fro:numberOfExits ?numExits .

                # Calculate required minimum number of exits based on occupancy rules
                BIND (
                    IF(?occupancy < 100, 1,                          # Case 1: occupancy < 100 -> 1 exit
                    IF(?occupancy < 500, 2,                          # Case 2: 100 <= occupancy < 500 -> 2 exits
                       # Case 3: occupancy >= 500 -> 2 + n exits
                       # n = 'het geheel getal is onmiddellijk groter dan het quotiënt' = floor(quotient) + 1
                       # So, required = 2 + (floor(occupancy / 1000) + 1) = 3 + floor(occupancy / 1000)
                       # Use xsd:decimal for division to handle potential non-integer results before FLOOR
                       3 + FLOOR(xsd:decimal(?occupancy) / 1000.0)
                    ))
                    AS ?requiredExitsDecimal # Intermediate result might be decimal if occupancy is large
                )
                # Ensure requiredExits is treated as integer for comparison
                BIND(xsd:integer(?requiredExitsDecimal) AS ?requiredExits)

                # Filter for violations: actual number of exits < calculated required minimum exits
                FILTER (?numExits < ?requiredExits)
            }
            """ ;
    ] .