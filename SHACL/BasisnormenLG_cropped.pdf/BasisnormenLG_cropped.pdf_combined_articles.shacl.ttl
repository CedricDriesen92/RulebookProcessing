@prefix bot: <https://w3id.org/bot#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix fro: <https://ontology.firebim.be/ontology/fro#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

fro:EvacuationRouteCompliesWith4_4_Shape a sh:NodeShape ;
    rdfs:label "Placeholder shape for Rule 4.4 compliance check"@en .

fro:ProtectedEvacuationRouteProperties_Article_2_2_2_1 a sh:NodeShape ;
    dcterms:source fro:Article_2_2_2_1 ;
    sh:message "Describes properties of a protected evacuation route allowed as an alternative from underground storeys (Rule 2.2.2.1)."@en ;
    sh:property [ sh:class fro:ExteriorEnvironment ;
            sh:maxCount 1 ;
            sh:message "Protected alternative route must lead directly outside."@en ;
            sh:minCount 1 ;
            sh:path fro:leadsTo ],
        [ sh:message "Check walls fire resistance (EI 30 required)."@en ;
            sh:minCount 1 ;
            sh:node [ a sh:NodeShape ;
                    sh:property [ sh:hasValue "EI 30" ;
                            sh:message "Walls of the protected alternative route must have fire resistance EI 30."@en ;
                            sh:path fro:hasFireResistance ] ] ;
            sh:path ( bot:containsElement [ a bot:Wall ] ) ],
        [ sh:message "Check doors fire resistance (EI1 30 required)."@en ;
            sh:minCount 1 ;
            sh:node [ a sh:NodeShape ;
                    sh:property [ sh:hasValue "EI1 30" ;
                            sh:message "Doors of the protected alternative route must have fire resistance EI1 30."@en ;
                            sh:path fro:hasFireResistance ] ] ;
            sh:path ( bot:containsElement [ a bot:Door ] ) ] .

fro:Shape_Article_2_1_1 a sh:NodeShape ;
    rdfs:label "SHACL Shape for Article 2.1.1 - Compartment Area/Length/Equipment"@en ;
    rdfs:comment """Validates fire compartments based on Article 2.1.1.
Checks area limits (<2500m² standard, <=3500m² if single ground-floor comp.),
length limit (<=90m if single ground-floor comp.),
parking status,
or required equipment (extinguishing + smoke/heat evacuation) if limits are exceeded.
Note: The context 'single compartment in ground-floor building' is checked implicitly by allowing the corresponding limits. Ministerial exceptions are not modeled."""@en ;
    sh:or ( [ sh:class fro:Parking ;
                sh:message "Compartment is a Parking, specific area rules from Art 2.1.1 do not apply (see 5.2)." ] [ sh:message "Non-parking compartment fails validation against Art 2.1.1 conditions (standard limit, ground-floor single comp. limit, or equipped exception)." ;
                sh:not [ sh:class fro:Parking ] ;
                sh:or ( [ sh:message "Standard compartment area must be present and < 2500 m²." ;
                            sh:property [ sh:datatype xsd:decimal ;
                                    sh:maxExclusive 2500.0 ;
                                    sh:minCount 1 ;
                                    sh:path fro:hasArea ] ] [ sh:message "Compartment meets limits potentially applicable to single ground-floor context (Area <= 3500 m², Length <= 90 m)." ;
                            sh:property [ sh:datatype xsd:decimal ;
                                    sh:maxInclusive 3500.0 ;
                                    sh:minCount 1 ;
                                    sh:path fro:hasArea ],
                                [ sh:datatype xsd:decimal ;
                                    sh:maxInclusive 90.0 ;
                                    sh:minCount 1 ;
                                    sh:path fro:hasLength ] ] [ sh:message "Compartment area/length limits potentially exceeded, but meets equipment exception (Extinguishing + Smoke/Heat)." ;
                            sh:property [ sh:hasValue true ;
                                    sh:minCount 1 ;
                                    sh:path fro:hasAutomaticExtinguishingSystem ],
                                [ sh:hasValue true ;
                                    sh:minCount 1 ;
                                    sh:path fro:hasSmokeAndHeatEvacuationSystem ] ] ) ] ) ;
    sh:targetClass fro:Compartment .

fro:Shape_Article_2_1_2 a sh:NodeShape ;
    sh:filterShape [ sh:not [ sh:class fro:Parking ] ] ;
    sh:message "A compartment must span exactly one storey, unless it meets specific conditions for Duplex (2 storeys, <=2500m², internal stairs), Triplex (3 storeys, <=300m², internal stairs, specific fire detection), contains only technical rooms, or is an Atrium with required safety systems (extinguishing, smoke/heat extraction). Parkings are excluded from this rule (ref 5.2)."@en,
        "Een compartiment overspant exact één bouwlaag, tenzij het voldoet aan specifieke voorwaarden voor Duplex (2 lagen, <=2500m², binnentrap), Triplex (3 lagen, <=300m², binnentrap, specifieke branddetectie), enkel technische lokalen bevat, of een Atrium is met vereiste veiligheidssystemen (blussing, RWA). Parkings zijn uitgesloten van deze regel (zie 5.2)."@nl ;
    sh:or ( [ a sh:NodeShape ;
                sh:property [ sh:maxCount 1 ;
                        sh:minCount 1 ;
                        sh:path fro:spansStorey ] ] [ a sh:NodeShape ;
                sh:property [ sh:maxCount 2 ;
                        sh:minCount 2 ;
                        sh:path fro:spansStorey ],
                    [ sh:minCount 1 ;
                        sh:path fro:hasInternalStaircase ],
                    [ sh:datatype xsd:decimal ;
                        sh:maxInclusive 2500 ;
                        sh:path fro:cumulativeStoreyArea ] ] [ a sh:NodeShape ;
                sh:property [ sh:maxCount 3 ;
                        sh:minCount 3 ;
                        sh:path fro:spansStorey ],
                    [ sh:minCount 1 ;
                        sh:path fro:hasInternalStaircase ],
                    [ sh:datatype xsd:decimal ;
                        sh:maxInclusive 300 ;
                        sh:path fro:cumulativeStoreyArea ],
                    [ sh:minCount 1 ;
                        sh:node [ a sh:NodeShape ;
                                sh:property [ sh:hasValue fro:TotalSurveillance ;
                                        sh:path fro:detectionType ],
                                    [ sh:hasValue true ;
                                        sh:path fro:givesAutomaticIndication ],
                                    [ sh:hasValue true ;
                                        sh:path fro:detectorsAdaptedToRisk ] ] ;
                        sh:path fro:hasFireDetectionSystem ] ] [ a sh:NodeShape ;
                sh:property [ sh:hasValue true ;
                        sh:path fro:containsOnlyTechnicalRooms ],
                    [ sh:minCount 1 ;
                        sh:path fro:spansStorey ] ] [ a sh:NodeShape ;
                sh:or ( [ sh:class fro:AtriumCompartment ] [ sh:property [ sh:hasValue true ;
                                    sh:path fro:isAtrium ] ] ) ;
                sh:property [ sh:minCount 1 ;
                        sh:node [ a sh:NodeShape ;
                                sh:property [ sh:hasValue fro:Automatic ;
                                        sh:path fro:systemType ] ] ;
                        sh:path fro:hasExtinguishingSystem ],
                    [ sh:minCount 1 ;
                        sh:path fro:hasSmokeHeatExtractionSystem ],
                    [ sh:minCount 1 ;
                        sh:path fro:spansStorey ] ] ) ;
    sh:targetClass fro:Compartment .

fro:Shape_Article_2_2_1_1 a sh:NodeShape ;
    sh:description """Checks if the minimum number of exits meets the requirements based on maximum occupancy:
- Occupancy < 100: min 1 exit
- 100 <= Occupancy < 500: min 2 exits
- Occupancy >= 500: min 2 + n exits, where n = floor(occupancy / 1000) + 1 (i.e., min 3 + floor(occupancy / 1000) exits)"""@en ;
    sh:message "Validatie shape voor Artikel 2.2.1.1 betreffende minimum aantal uitgangen gebaseerd op bezetting."@nl ;
    sh:property [ sh:datatype xsd:integer ;
            sh:maxCount 1 ;
            sh:message "Maximale bezetting moet opgegeven zijn als een enkel, niet-negatief geheel getal voor de berekening van het aantal uitgangen (Art. 2.2.1.1)."@nl ;
            sh:minCount 1 ;
            sh:minInclusive 0 ;
            sh:path fro:maximumOccupancy ],
        [ sh:datatype xsd:integer ;
            sh:message "Aantal uitgangen moet opgegeven zijn als een positief geheel getal voor validatie (Art. 2.2.1.1)."@nl ;
            sh:minCount 1 ;
            sh:minInclusive 1 ;
            sh:path fro:numberOfExits ] ;
    sh:sparql [ sh:message "Het aantal uitgangen ({?numExits}) voldoet niet aan de minimumeis ({?requiredExits}) gebaseerd op de maximale bezetting ({?occupancy}) (Art. 2.2.1.1)."@nl ;
            sh:prefixes [ sh:declare [ sh:namespace "http://example.com/firebim#"^^xsd:anyURI ;
                            sh:prefix "firebim" ],
                        [ sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI ;
                            sh:prefix "xsd" ] ] ;
            sh:select """
            SELECT $this ?occupancy ?numExits ?requiredExits
            WHERE {
                # Get the occupancy and number of exits for the target node ($this)
                $this fro:maximumOccupancy ?occupancy .
                $this fro:numberOfExits ?numExits .

                # Calculate required minimum number of exits based on occupancy rules
                BIND (
                    IF(?occupancy < 100, 1,                          # Case 1: occupancy < 100 -> 1 exit
                    IF(?occupancy < 500, 2,                          # Case 2: 100 <= occupancy < 500 -> 2 exits
                       # Case 3: occupancy >= 500 -> 2 + n exits
                       # n = 'het geheel getal is onmiddellijk groter dan het quotiënt' = floor(quotient) + 1
                       # So, required = 2 + (floor(occupancy / 1000) + 1) = 3 + floor(occupancy / 1000)
                       # Use xsd:decimal for division to handle potential non-integer results before FLOOR
                       3 + FLOOR(xsd:decimal(?occupancy) / 1000.0)
                    ))
                    AS ?requiredExitsDecimal # Intermediate result might be decimal if occupancy is large
                )
                # Ensure requiredExits is treated as integer for comparison
                BIND(xsd:integer(?requiredExitsDecimal) AS ?requiredExits)

                # Filter for violations: actual number of exits < calculated required minimum exits
                FILTER (?numExits < ?requiredExits)
            }
            """ ] ;
    sh:targetClass fro:Compartment,
        bot:Space,
        bot:Storey .

fro:Shape_Article_2_2_2_1 a sh:NodeShape ;
    dcterms:source fro:Article_2_2_2_1 ;
    rdfs:comment "Article 2.2.2.1 includes specific provisions for exits/routes from underground storeys (alternative path with EI30 walls/doors)."@en,
        "Article 2.2.2.1 includes specific provisions for stairs on evacuation levels leading outside (directly or via compliant route)."@en ;
    sh:message "Constraints based on Article 2.2.2.1 regarding compartment exits and associated evacuation routes."@en ;
    sh:property [ sh:message "Compartment must have at least two exits (Rule 2.2.2.1). The rule also requires them to be in opposite zones, which needs manual verification or advanced spatial checks."@en ;
            sh:minCount 2 ;
            sh:node [ a sh:NodeShape ;
                    sh:message "Check properties of each exit from the compartment."@en ;
                    sh:property [ sh:message "Each exit must lead to an evacuation route (Implicit from Rule 2.2.2.1)."@en ;
                            sh:minCount 1 ;
                            sh:node fro:EvacuationRouteDestinationCheckShape_Article_2_2_2_1 ;
                            sh:path fro:leadsToEvacuationRoute ] ] ;
            sh:path fro:hasExit ] ;
    sh:targetClass fro:Compartment .

fro:EvacuationRouteDestinationCheckShape_Article_2_2_2_1 a sh:NodeShape ;
    dcterms:source fro:Article_2_2_2_1 ;
    rdfs:comment "Rule 2.2.2.1 also references rule 4.4 for horizontal distances, which may imply further constraints on the route."@en ;
    sh:message "Checks the destination of an evacuation route based on Rule 2.2.2.1." ;
    sh:property [ sh:message "Evacuation route must lead to: outside, a stairwell, or stairs (Rule 2.2.2.1)."@en ;
            sh:minCount 1 ;
            sh:or ( [ sh:class fro:ExteriorEnvironment ;
                        sh:message "Route leads outside."@en ] [ sh:class fro:Stairwell ;
                        sh:message "Route leads to a stairwell ('trappenhuis')."@en ] [ sh:class bot:Stair ;
                        sh:message "Route leads to stairs ('trappen')."@en ] ) ;
            sh:path fro:leadsTo ] .

